import socket
import requests

def scan_ports(target_ip):
    open_ports = []
    for port in range(1, 1025):  # Scanning the first 1024 ports
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex((target_ip, port))
            if result == 0:
                open_ports.append(port)
    return open_ports

def get_service_name(port):
    # Here we map ports to service names
    service_map = {
        21: "FTP",
        22: "SSH",
        23: "Telnet",
        25: "SMTP",
        80: "HTTP",
        443: "HTTPS",
        3306: "MySQL",
        5432: "PostgreSQL",
        6379: "Redis",
    }
    return service_map.get(port, "Unknown Service")

def fetch_vulnerabilities(service_name):
    # Mock vulnerabilities for demonstration
    mock_vulnerabilities = {
        "FTP": [{"name": "Anonymous FTP Login"}, {"name": "Weak Passwords"}],
        "SSH": [{"name": "Weak Passwords"}],
        "HTTP": [{"name": "Open Redirect"}, {"name": "SQL Injection"}],
        "HTTPS": [{"name": "SSL Certificate Issues"}],
        "MySQL": [{"name": "SQL Injection"}, {"name": "Remote Code Execution"}],
    }
    # Return mock vulnerabilities or empty list if service not found
    return mock_vulnerabilities.get(service_name, [])

def suggest_remediation(vulnerability):
    # Suggest remediation based on vulnerability
    remediation_map = {
        "Weak Passwords": "Implement strong password policies.",
        "Open Relay": "Configure your mail server to restrict relaying.",
        "SQL Injection": "Use prepared statements and parameterized queries.",
        "Outdated Software": "Upgrade to the latest version.",
        "Anonymous FTP Login": "Disable anonymous login for FTP services.",
        "Open Redirect": "Validate all user input and URLs.",
        "SSL Certificate Issues": "Ensure SSL certificates are valid and up-to-date.",
        "Remote Code Execution": "Patch the application and review access controls."
    }
    return remediation_map.get(vulnerability, "No specific remediation available.")

def main():
    target_ip = input("Enter the target IP address: ")
    print(f"\nScanning for open ports on {target_ip}...\n")
    
    open_ports = scan_ports(target_ip)
    
    if open_ports:
        print("Open Ports and Vulnerabilities:")
        for port in open_ports:
            service_name = get_service_name(port)
            print(f"\nPort: {port} - Service: {service_name}")

            vulnerabilities = fetch_vulnerabilities(service_name)
            if vulnerabilities:
                for vuln in vulnerabilities:
                    print(f" - Vulnerability: {vuln['name']}")
                    print(f"   Remediation: {suggest_remediation(vuln['name'])}")
            else:
                print(" - No known vulnerabilities found.")
    else:
        print("No open ports found.")

if __name__ == "__main__":
    main()

